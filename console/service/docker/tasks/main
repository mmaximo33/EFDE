#!/usr/bin/env bash
set -euo pipefail
declare -g GLOBAL_DOCKER_COMPOSE_COMMAND

# https://docs.docker.com/compose/
# From the end of June 2023 Compose V1 wonâ€™t be supported anymore and will be removed from all Docker Desktop versions.
if docker compose version > /dev/null 2>&1; then
  GLOBAL_DOCKER_COMPOSE_COMMAND="docker compose"
else
  GLOBAL_DOCKER_COMPOSE_COMMAND="docker-compose"
fi

_mod_.dp_command_run() {
  local INPUT="true"
  local OUTPUT="false"
  local COMMAND=""

  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      --input|-i)
        INPUT="$2"
        shift 2
        ;;
      --output|-o)
        OUTPUT="$2"
        shift 2
        ;;
      --cli|-c)
        COMMAND="$2"
        shift 2
        ;;
      *)
        common.tasks.message.danger "Unrecognized option: $1" >&2
        return 1
        ;;
    esac
  done

  if [[ -z "$COMMAND" ]]; then
    common.tasks.message.danger "Error: No command was provided." >&2
    return 1
  fi

  common.tasks.command_line.run "${INPUT}" "${OUTPUT}" "${GLOBAL_DOCKER_COMPOSE_COMMAND}" "${COMMAND}"
}



_mod_.dp_build(){
  _mod_.dp_all_stop
  _mod_.dp_command_run --cli "up -d --build"
}

_mod_.dp_start(){
  _mod_.dp_command_run --cli "start"
}

_mod_.dp_stop(){
  _mod_.dp_command_run --cli "stop"
}

_mod_.dp_restart(){
  _mod_.dp_command_run --cli "restart"
}

_mod_.dp_all_stop(){
  local CONTAINERS=$(docker ps -q | tr '\n' ' ')
  if [ -n "$CONTAINERS" ]; then
    common.tasks.command_line.run true false "docker stop $CONTAINERS"
  else
    common.tasks.message.info "> There are no containers running at this time."
  fi
}

_mod_.apache_stop(){
  if systemctl is-active --quiet apache2; then
      local QUESTION="APACHE2 is ON, do you want to turn it OFF?"
      if common.tasks.prompt.confirm_default_yes "$QUESTION" ; then
        local COMMAND_RUN="sudo service apache2 stop"
        common.tasks.command_line.run true false "$COMMAND_RUN"
      fi
  fi
}

_mod_.dp_down(){
  local QUESTION=$(common.tasks.message.msg_color danger "Do you want to remove services from the project?")
  _mod_.dp_show_container
  if common.tasks.prompt.confirm_default_no "$QUESTION" ; then
    _mod_.dp_command_run --cli "down"
  fi
}

_mod_.dp_logs(){
  local -A MSG
  local COMMAND_RUN VALUES SEARCH
  COMMAND_RUN="logs -f"
  VALUES=""
  MSG=(
    [MAIN]=$(common.tasks.message.msg_color warning 'Enter value to search or press ENTER for show all:')
    [NEXT]=$(common.tasks.message.msg_color warning 'Find another value or ENTER:')
  )

  common.tasks.message.info "Log monitor"
  while true; do
    SEARCH=$(common.tasks.prompt.request_input "${MSG['MAIN']}")

    if [[ -z "$SEARCH" ]]; then
      break
    else
      if [[ -n "$VALUES" ]]; then
          VALUES="$VALUES|$SEARCH"
      else
          VALUES="$SEARCH"
          MSG[MAIN]="${MSG['NEXT']}"
      fi
    fi
  done

  if [[ -n "$VALUES" ]]; then
      COMMAND_RUN="${COMMAND_RUN} | egrep --color=always -E \"$VALUES\""
  fi
  _mod_.dp_command_run -i true -o true -c "${COMMAND_RUN}"
}

_mod_.dp_show_container() {
  local COMMAND="ps -a --format \"table {{.Service}}\t{{.Name}}\t{{.Ports}}\t{{.Status}}\t{{.Image}}\""
  local quit=false

  if [[ "$#" -gt 0 ]]; then
    case "$1" in
      --quit|-q)
        quit=true
        ;;
      *)
        common.tasks.message.danger "Unrecognized option: $1" >&2
        return 1
        ;;
    esac
  fi

  _mod_.dp_command_run -i true -o true -c "$COMMAND"

  if [[ "$quit" == true ]]; then
    return 1
  fi
}


#_mod_.container_select() {
#  local MSG SERVICE
#  _mod_.dp_show_container
#q
#  local MSG=$(common.tasks.message.msg_color warning 'Enter SERVICE name:')
#  local SERVICE
#  SERVICE=$(common.tasks.prompt.request_input "$MSG")
#
#  while [[ -z "$SERVICE" || -z $(docker-compose ps -q --services | grep -w "$SERVICE") ]]; do
#    common.tasks.message.warning "Invalid service name. Please enter a valid service."
#    SERVICE=$(common.tasks.prompt.request_input "$MSG")
#  done
#
#  _mod_.dp_command_run --cli "ps --filter name=$SERVICE"
#  echo "$SERVICE"
#}

_mod_.container_entry(){
  local COMMAND_RUN VALUES MSG SERVICE

  _mod_.dp_show_container
  MSG=$(common.tasks.message.msg_color warning 'Enter SERVICE name:')
  SERVICE=$(common.tasks.prompt.request_input "$MSG")

  MSG=$(common.tasks.message.msg_color warning 'You want to open a new instance? RUN=Y or EXEC=N')
  if common.tasks.prompt.confirm_default_yes "$MSG"; then
    COMMAND_RUN="run --rm"
  else
    COMMAND_RUN="exec"
  fi
  _mod_.dp_command_run -i true -o true -c "$COMMAND_RUN $SERVICE bash"
}

_mod_.container_run_command() {
  local COMMAND_RUN COMMAND_CUSTOM MSG SERVICE

  _mod_.dp_show_container

  MSG=$(common.tasks.message.msg_color warning 'Enter SERVICE name:')
  SERVICE=$(common.tasks.prompt.request_input "$MSG")

  MSG=$(common.tasks.message.msg_color warning 'You want to open a new instance? RUN=Y or EXEC=N')
  if common.tasks.prompt.confirm_default_yes "$MSG"; then
    COMMAND_RUN="run --rm"
  else
    COMMAND_RUN="exec"
  fi

  while true; do
    MSG=$(common.tasks.message.msg_color warning 'What command do you want to run?:')
    COMMAND_CUSTOM=$(common.tasks.prompt.request_input "$MSG")

    _mod_.dp_command_run -i true -o true -c "$COMMAND_RUN $SERVICE $COMMAND_CUSTOM"

    MSG=$(common.tasks.message.msg_color warning 'Do you want to run another command?')
    if common.tasks.prompt.confirm_default_yes "$MSG"; then
      continue
    else
      break
    fi
  done
}

_mod_.recipe_see(){
  cat docker-compose.yml
  _mod_.main
}


#!/usr/bin/env bash
set -euo pipefail

CONFIG_FILE="config.env"
CONFIG_PATH_FILE="$EFDE_PATH_INSTALL/bin/$CONFIG_FILE"

_mod_.set_run_cli_efde(){
  #GLOBAL_RUN_EFDE=$([ "${GLOBAL_EFDE_CONFIG['EFDE_MODE_DEVELOP']}" = "true" ] && echo "e2" || echo "efde")
  GLOBAL_RUN_EFDE=$(basename "$0")
}

_mod_.check_config() {
  _mod_.set_run_cli_efde
  if ! common.tasks.file.exists "$CONFIG_PATH_FILE"; then
    _mod_.create_config
  fi
  _mod_.load_config
}

_mod_.create_config() {
  common.tasks.message.info "Your first time with EFDE?"
  common.tasks.message.info "We will create the basic configurations"
  _mod_.set_config


  if [ "${GLOBAL_EFDE_CONFIG['LANGUAGE_DEFAULT']}" != "$(efde.tasks.config.get_var "EFDE_LANGUAGE")" ]; then
    common.core.generate_transactions
    common.tasks.message.info "The translation configuration has been applied, we need to restart EFDE"
    common.tasks.message.success "Run on your console \n$ $GLOBAL_RUN_EFDE"
    exit # Reload for translations
  fi
}

_mod_.set_config(){
  _mod_.set_config_language
  _mod_.set_config_editor
  _mod_.set_config_cli

  _mod_.set_var "HOST_SO"                     "$(common.tasks.os.get_operating_system)"
  _mod_.set_var "EFDE_VERSION"                "$(_mod_.set_config_version)"
  _mod_.set_var "EFDE_LAST_UPDATE"            "$(common.tasks.datetime.get_formatted_datetime "%Y-%m-%d")"
  _mod_.set_var "EFDE_MODE_DEBUG"             "false"
  _mod_.set_var "EFDE_MODE_DEVELOP"           "false"
  _mod_.confirm_config
}

_mod_.confirm_config(){
    _mod_.sort_var_in_file
    common.tasks.message.success "This is your EFDE configuration"
    common.tasks.message.info "It is stored in the following file \n> $CONFIG_PATH_FILE \n"

    _mod_.show_config
    if common.tasks.prompt.confirm_default_no $(common.tasks.message.msg_color warning "\nReset settings") ; then
      _mod_.set_config
    fi
}

_mod_.show_config() {
  while IFS= read -r LINE || [[ -n "$LINE" ]]; do
      common.tasks.message.info "$LINE"
  done < "$CONFIG_PATH_FILE"
}

_mod_.set_config_language(){
  common.tasks.menu.show "Default language?" "${efde_props_menu_CONFIG_SET_LANGUAGE[@]}"
  RESPONSE=${GLOBAL_MENU_RESPONSE_ARRAY_ASOCITIVE['function']}
  _mod_.set_var "EFDE_LANGUAGE" "$RESPONSE"
}

_mod_.set_config_cli(){
  local MSG=""
  local RESPONSE=false
  local TYPE_SETTINGS=(
    "shortcut:off,  default,    Default (Recommended),    Established by implementation"
    "shortcut:off,  training,   Training,                 Show executed commands, no output"
    "shortcut:off,  auditor,    Auditor,                  Show executed commands and output"
    "shortcut:off,  silent,     Silent,                   Do not show executed commands or output"
  )

  common.tasks.menu.show "How to see executed commands and outputs" "${TYPE_SETTINGS[@]}"
  RESPONSE=${GLOBAL_MENU_RESPONSE_ARRAY_ASOCITIVE['function']}
  case $RESPONSE in
    default)
      _mod_.set_var "CLI_DEFAULT"       "true"
      _mod_.set_var "CLI_SHOW_CLI"      "true"
      _mod_.set_var "CLI_SHOW_OUTPUT"   "false"
      ;;
    silent)
      _mod_.set_var "CLI_DEFAULT"       "false"
      _mod_.set_var "CLI_SHOW_CLI"      "false"
      _mod_.set_var "CLI_SHOW_OUTPUT"   "false"
      ;;
    training)
      _mod_.set_var "CLI_DEFAULT"       "false"
      _mod_.set_var "CLI_SHOW_CLI"      "true"
      _mod_.set_var "CLI_SHOW_OUTPUT"   "false"
      ;;
    auditor)
      _mod_.set_var "CLI_DEFAULT"       "false"
      _mod_.set_var "CLI_SHOW_CLI"      "true"
      _mod_.set_var "CLI_SHOW_OUTPUT"   "true"
      ;;
  esac

}

_mod_.set_config_version() {
  echo $(efde.tasks.git.get_current_tag)
}

_mod_.load_config() {
  mapfile -t EFDE_CONFIG < <(grep -o '^[^=]\+' "$CONFIG_PATH_FILE")
  for KEY in "${EFDE_CONFIG[@]}"; do
    GLOBAL_EFDE_CONFIG["$KEY"]=$(_mod_.get_var "$KEY")
  done

  if [[ "${GLOBAL_EFDE_CONFIG['EFDE_MODE_DEBUG']}" = "true" ]]; then
    common.tasks.message.debug "#######################################################################"
    common.tasks.message.debug "# LOAD CONFIG "
    common.tasks.message.debug "-----------------------------------------------------------------------"
    for clave in "${!GLOBAL_EFDE_CONFIG[@]}"; do
        common.tasks.message.tree "$clave: ${GLOBAL_EFDE_CONFIG[$clave]}" 1 0 debug
    done
  fi
}

_mod_.get_var(){
  local KEY="$1"
  echo $(common.tasks.env_variable.get_variable "$KEY" "$CONFIG_PATH_FILE")
}

_mod_.set_var(){
  local KEY="$1"
  local VALUE="$2"
  common.tasks.env_variable.set_variable "$KEY" "$VALUE" "$CONFIG_PATH_FILE"
}

_mod_.sort_var_in_file(){
  sort -o "$CONFIG_PATH_FILE" "$CONFIG_PATH_FILE"
}

_mod_.set_config_editor(){
  local EDITORS=("nano" "vim" "nvim")
  local EDITORS_MENU

  for KEY in "${EDITORS[@]}"; do
    if common.tasks.os.has "$KEY"; then
      EDITORS_MENU+=("shortcut:off, $KEY, $KEY")
    fi
  done

  common.tasks.menu.show "select EDITOR default" "${EDITORS_MENU[@]}"
  RESPONSE=${GLOBAL_MENU_RESPONSE_ARRAY_ASOCITIVE['function']}
  _mod_.set_var "HOST_EDITOR_DEFAULT" "$RESPONSE"
}

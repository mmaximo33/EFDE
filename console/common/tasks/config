#!/usr/bin/env bash
set -euo pipefail
###########################################################
# DANGER WARNING
# Try to avoid calling functions outside this file to avoid adding on essential load modules
###########################################################

CONFIG_PATH_FILE="${EFDE_CORE_PATH['FILE_CONFIG']}"

_mod_.show_debug(){
  if _mod_.get_efde_mode_debug_config; then
    common.tasks.message.debug_manager_title "CONFIG"
    sorted_keys=($(printf "%s\n" "${!GLOBAL_EFDE_CONFIG[@]}" | sort))

    for KEY in "${sorted_keys[@]}"; do
        common.tasks.message.tree "$KEY: ${GLOBAL_EFDE_CONFIG[$KEY]}" 1 0 debug
    done
  fi
}

_mod_.set_run_cli_efde(){
  GLOBAL_RUN_EFDE=$(basename "$0")
}

_mod_.check_config() {
  _mod_.set_run_cli_efde
  if ! common.tasks.file.exists "$CONFIG_PATH_FILE"; then
    _mod_.create_config
  fi
  _mod_.load_config
}

_mod_.create_config() {
  common.tasks.message.info "Your first time with EFDE?"
  common.tasks.message.info "We will create the basic configurations"
  _mod_.set_config

  if [ "${EFDE_CORE_CONFIG['I18N_DEFAULT']}" != "$(common.tasks.config.get_var "HOST_I18N")" ]; then
    common.tasks.message.warning "\n\nApplying translations, wait a moment..."
    common.core.generate_translation
    common.tasks.message.success "\nThe translation configuration has been applied, we need to restart EFDE"
    common.tasks.message.success "Run on your console \n> $GLOBAL_RUN_EFDE"
    exit # Reload for translations
  fi
}

_mod_.set_config(){
  _mod_.set_config_language
  _mod_.set_config_editor
  _mod_.set_config_cli

  # CORE
  _mod_.set_var "EFDE_CORE_LAST_UPDATE"       "$(common.tasks.datetime.get_formatted_datetime "%Y-%m-%d")"
  _mod_.set_var "EFDE_CORE_VERSION"           "$(_mod_.set_config_version)"

  # Developer
  _mod_.set_var "EFDE_MODE_DEBUG"             "false"
  _mod_.set_var "EFDE_MODE_DEBUG_MODULE"      "false"
  _mod_.set_var "EFDE_MODE_DEBUG_SHORTCUTS"   "false"
  _mod_.set_var "EFDE_MODE_DEBUG_CONFIG"      "false"
  _mod_.set_var "EFDE_MODE_DEBUG_I18N"        "false"
  _mod_.set_var "EFDE_MODE_DEBUG_MENU"        "false"

  # Host
  _mod_.set_var "HOST_SO"                     "$(common.tasks.os.get_operating_system)"

  _mod_.confirm_config
}

_mod_.confirm_config(){
    _mod_.sort_var_in_file
    common.tasks.message.success "This is your EFDE configuration"
    common.tasks.message.info "It is stored in the following file \n> $CONFIG_PATH_FILE \n"

    _mod_.show
    if common.tasks.prompt.confirm_default_no $(common.tasks.message.msg_color warning "\nReset settings") ; then
      _mod_.set_config
    fi
}

_mod_.show() {
  while IFS= read -r LINE || [[ -n "$LINE" ]]; do
      common.tasks.message.info "$LINE"
  done < "$CONFIG_PATH_FILE"
}

_mod_.set_config_language(){
  common.tasks.menu.show \
    --title "Default language?" \
    --data "${common_props_config_SET_LANGUAGE[@]}" \
    --isfunction false

  RESPONSE=$(common.tasks.menu.get_selected_value)
  _mod_.set_var "HOST_I18N" "$RESPONSE"
}

_mod_.set_config_editor(){
  common.tasks.menu.show \
    --title "select EDITOR default" \
    --data "${common_props_config_SET_EDITOR[@]}" \
    --isfunction false

  RESPONSE=$(common.tasks.menu.get_selected_value)
  _mod_.set_var "HOST_EDITOR_DEFAULT" "$RESPONSE"
}

_mod_.set_config_cli(){
  local MSG=""
  local RESPONSE=false
  local TYPE_SETTINGS=(
    "default,    Default (Recommended),    Established by implementation"
    "training,   Training,                 Show executed commands, no output"
    "auditor,    Auditor,                  Show executed commands and output"
    "silent,     Silent,                   Do not show executed commands or output"
  )

  common.tasks.menu.show \
    --title "How to see executed commands and outputs" \
    --data "${TYPE_SETTINGS[@]}" \
    --isfunction false

  RESPONSE=$(common.tasks.menu.get_selected_value)
  case $RESPONSE in
    default)
      _mod_.set_var "CLI_DEFAULT"       "true"
      _mod_.set_var "CLI_SHOW_CLI"      "true"
      _mod_.set_var "CLI_SHOW_OUTPUT"   "false"
      ;;
    silent)
      _mod_.set_var "CLI_DEFAULT"       "false"
      _mod_.set_var "CLI_SHOW_CLI"      "false"
      _mod_.set_var "CLI_SHOW_OUTPUT"   "false"
      ;;
    training)
      _mod_.set_var "CLI_DEFAULT"       "false"
      _mod_.set_var "CLI_SHOW_CLI"      "true"
      _mod_.set_var "CLI_SHOW_OUTPUT"   "false"
      ;;
    auditor)
      _mod_.set_var "CLI_DEFAULT"       "false"
      _mod_.set_var "CLI_SHOW_CLI"      "true"
      _mod_.set_var "CLI_SHOW_OUTPUT"   "true"
      ;;
  esac

}

_mod_.set_config_version() {
  echo $(common.tasks.git.efde_get_current_tag)
}

_mod_.load_config() {
  mapfile -t EFDE_CONFIG < <(grep -o '^[^=]\+' "$CONFIG_PATH_FILE")
  for KEY in "${EFDE_CONFIG[@]}"; do
    GLOBAL_EFDE_CONFIG["$KEY"]=$(_mod_.get_var "$KEY")
  done

  _mod_.show_debug
}

_mod_.get_var(){
  local KEY="$1"
  echo $(common.tasks.env_variable.get_variable "$KEY" "$CONFIG_PATH_FILE")
}

_mod_.set_var(){
  local KEY="$1"
  local VALUE="$2"
  common.tasks.env_variable.set_variable "$KEY" "$VALUE" "$CONFIG_PATH_FILE"
}

_mod_.sort_var_in_file(){
  sort -o "$CONFIG_PATH_FILE" "$CONFIG_PATH_FILE"
}

_mod_.is_language_supported() {
  local language="$1"

  for item in "${common_props_config_SET_LANGUAGE[@]}"; do
    local lang_code="${item%%,*}"
    if [[ "$lang_code" == "$language" ]]; then
      return 0
    fi
  done
  return 1
}

_mod_.get_efde_core_i18n_default(){
  local language="${EFDE_CORE_CONFIG['I18N_DEFAULT']}"
  if _mod_.is_language_supported "$language"; then
    echo "$language"
  else
    common.tasks.message.danger "Error: The value for 'EFDE_CORE_CONFIG['I18N_DEFAULT']' is not valid";
    return 1
  fi
}

_mod_.get_host_i18n(){
  local language="$(common.tasks.config.get_var "HOST_I18N")"
  if _mod_.is_language_supported "$language"; then
    echo "$language"
  else
    common.tasks.message.danger "Error: The value for 'HOST_I18N' is not valid";
    return 1
  fi
}

###########################################################
# MODE DEVELOP / DEBUG [MODULE | CONFIG | | I18N | MENU ]
###########################################################
_mod_.get_efde_mode_debug(){
  # return 0 (true) or 1 (false)
  # GENERAL AFTER THE CONSTRUCTION OF MODULES
  if [[ "${GLOBAL_EFDE_CONFIG['EFDE_MODE_DEBUG']}" == "true" ]]; then
    return 0
  fi
  return 1
}

_mod_.get_efde_mode_debug_modules() {
  # return 0 (true) or 1 (false)
  if _mod_.get_efde_mode_debug && \
    [[ "${GLOBAL_EFDE_CONFIG['EFDE_MODE_DEBUG_MODULE']:-${ESSENTIAL_MODULES['DEBUG']}}" == "true" ]]; then
    return 0
  fi
  return 1
}

_mod_.get_efde_mode_debug_shortcuts(){
  # Return 0 (true) or 1 (false)
  if _mod_.get_efde_mode_debug && [[ "${GLOBAL_EFDE_CONFIG['EFDE_MODE_DEBUG_SHORTCUTS']}" == "true" ]]; then
    return 0
  fi
  return 1
}

_mod_.get_efde_mode_debug_config(){
  # Return 0 (true) or 1 (false)
  if _mod_.get_efde_mode_debug && [[ "${GLOBAL_EFDE_CONFIG['EFDE_MODE_DEBUG_CONFIG']}" == "true" ]]; then
    return 0
  fi
  return 1
}

_mod_.get_efde_mode_debug_i18n(){
  # Return 0 (true) or 1 (false)
  if _mod_.get_efde_mode_debug && [[ "${GLOBAL_EFDE_CONFIG['EFDE_MODE_DEBUG_I18N']}" == "true" ]]; then
    return 0
  fi
  return 1
}

_mod_.get_efde_mode_debug_menu(){
  # Return 0 (true) or 1 (false)
  if _mod_.get_efde_mode_debug && [[ "${GLOBAL_EFDE_CONFIG['EFDE_MODE_DEBUG_MENU']}" == "true" ]]; then
    return 0
  fi
  return 1
}





